面试：
1. 读题（出声）
2. 标注input, 备注parameter/variable.
3. 点明题目标出的解范围，讨论边界值。i.e. exactly one solution in two sum.
    - assumption: range of input and output, more than one solution, extreme situation, communicate with interviewer.
4. output: 考虑output的空值情况，声明output特殊情况。
5. 想好用什么方式去做. i.e. brute force, big-o, O(n^2) for twosum.
6. 知道怎么做优化： 告诉面试官为何这么做， 时间复杂度是多少，[i.e. binary search, hashmap(twosum)-O(1)]
7. 不知道如何优化： 说明知道暴力枚举解法， 不知道optimal solution right now, do you want me start brute forcing or do we keep disussing
  optimizing.
    - may get hints
    - communicate is important.
8. 开始写答案时,多加comment：
            - class Solution {
            public:
                //hints: i enter two inputs here
                vector<int> twoSum(vector<int>& nums, int target) {

                //innitialize variable.
                    vector<int> sumIndexs;

                //here using double loop to find target index
                    for (int i=0; i<nums.size(); i++){
                        for (int j=i+1; j<nums.size(); j++){
                            //if (j!=i){
                                int elementsSum=nums[i]+nums[j];

                //indicate if the correct answer is reached, return sum index if yes.
                                if (elementsSum == target){
                                    sumIndexs.push_back(i);
                                    sumIndexs.push_back(j);

                                    // return correct answer
                                    return sumIndexs;  
                                }
                            //}
                        }
                    }

                //if null: return null.
                    if (sumIndexs.empty()){
                        return {};
                    }
                    else{
                        return sumIndexs;
                    }
                }
            };
    
    
9. 注意边写边优化的过程也要保持交流。
10. 判断边界值、空值情况，加入testing condition
11. follows up: 面试完后，提出对优化解法的理解。
12. binary search. double pointer, sliding window
    -labuladong 框架记忆.
    
    react-redux 框架  albinotonnina- component
    -提供状态容器， lets application run in any environment ( server side/ customer side )
    react hooks 
    
    第 1 - 2 分钟完成自我介绍、热身。

    第 3 - 10 分钟完成读题，完成 Clarification。

    第 10 - 15 分钟交代解题思路，Dry-Run 一个样例，并分析复杂度。

    第 15 - 25/30 分钟完成 Coding，并跑样例。

    第 25/30 - 40 分钟完成 Follow Up。

    第 40 - 45 分钟完成 Q&A。
    
    
    
    webhack babel 
    - advanced react
    - library management tool
    
react 优点： 
1.代码复用， 组件化开发， 高效轻量
2.关注应用中数据流， 适用于常见开发
3. NEXT.JS -- reactjs按次加载， nextjs按需加载， nextjs基于reactjs建立， 对规模大的数据，nextjs可以快速加载需要看到的部分。
4. 业界流行： NEXTJS + graphql（前段sql数据化包）
mysql， sql database, 高度结构化数据适用， 应用场景： 银行系统（oracle）， 在线商店， 因为数据需要精确标注，定义明确。ie用户账号地址需要结构化查询，且用户数据增长规模可预期， 
mango db, non-sql， 门槛低， 科技公司里广泛使用， 应用场景：主要AI， 社交网络，管理与网络分析系统（适合模糊处理， 全文搜索，machine learning，数据海量增长速度难以预期）。非关系型数据库， 用于超大型规模数据的存储， ie 谷歌， amz， 每天万亿比特数据量， 多且杂， 不需要固定模式、操作， nosql可以横向扩展适合这种多且杂的数据。

5.许多大型互联网项目都会用 sql database (定义精确,查找仔细完全,更) + non-sql 的组合方式， 
6. jsx, 
state, 
props,


组件之间传递3种：
1. parent passing to children: using props
2. children to parent: using callback
3. children to children: childrent to parent, then parent to children, (callback then props)
不用redux之前， children之间很麻烦， redux就为解决这个问题出现。 redux是个状态 state 管理器， 数据管理器，类似于一个数据库，父子组件都会从这里调用数据
redux: action, container, reducer,

纯后端：java, c++可写， 用sql调用， 会与前段分离， 大项目基本会用这种方式。门槛比较高， 维护成本比较高， 需要专门前后端工程师分离编写。
amazon cloud 源于amazon出租其空闲服务器， 在黑五等高峰期之外， 创收出租提供服务。 分私有云、公有云。 银行会租用私有云。


前后结合：（全栈JS） 全用js写， 主用mango db， MERN， mangodb express, react node js， 适用于startup, 新项目， 大公司写新项目， 偏ai的项目都会用这种方式，因为cost会更低。属于cloud database


如果您的应用符合以下某些条件，那么我认为应该立即使用 Redux。
    UI 可以根据应用程序状态显着变化
    并不总是以一种线性的，单向的方式流动
    许多不相关的组件以相同的方式更新状态
    状态树并不简单
    状态以许多不同的方式更新
    您需要能够撤消以前的用户操作


BST
规则：
1.node's left child must be less than node it self.
2.node's right child must be greater than node it self.
3.左右 sub tree must be BST


红黑树：
弱-自平衡 binary search tree
规则： 
1.每个节点都是 红色 或 黑色.
2.树的root始终是黑色的
3.没有两个相邻的红节点(no parent-child adjacent red)，黑节点可以相邻。
4.从节点到任何children的空节点的每条路径都具有相同数量的黑色节点
5.新加节点会通过 recolor + rotation, 新节点一定是红色起始, 
6.特色: 从root 到 leaf的最长路径 <= 2x最短路径, 确保没有任何路径比其他路径长两倍, 所以红黑树的旋转次数会比AVL少. 任何不平衡都会在三次旋转内解决, 所以他的insert效率更高.
7.适用于搜索, 插入, 删除多的情况, 旋转少等于cost少.
8.应用:  C++:     map, set
        Java:    treemap
        Linux:   虚拟内存管理 (对搜索效率要求很高)
9.
        

(recolor 是为了方便 rotation 操作的逻辑链.)



红黑树应用场景:
保证最坏情况下O(log N)完成 查找, 插入, 和删除.
BST 不是balanced, 只限制了left 和 right children 的大小关系.
只有在平衡的BST下, 它的时间复杂度才是O(log N).
非平衡下BST ~= 链表, 查找退化为O(N). 因此出现balanced BST
红黑树为染色红黑的 balanced BST

AVL Tree 一种自平衡, 不染色的BST (适用于纯查找)
1.为了保证查询速度, 它会不断插入并删除不必要的查询(因为没有满足平衡条件,就要需要旋转保持平衡,旋转非常消耗时间所以速度较慢), 所以他的树改变非常多.
2.适用于查找多的情况, 不适用插入多的情况.
3.TIME COMPLEXITY O(log 2^N).
4.局限性: 计算机领域中 AVL 很少用到. 维护AVL的高度平衡, 会付出巨大代价, 所以收益不大, 实际应用没有太多好处.



linked list:
doublinked list parameters: previous, value, after. 可以自己删自己.
single linked list parameters: value, after. 删除自己需要一个temp, 需要一轮查找.
已分配内存满后,新增数值在同一function (list.next)访问, 只需要O(1)链接新的memory unit.
对QUEUE, STACK, GRAPH, TREE是基础, 
优势:
    动态数据结构: 运行时自动增减占用内存, 无浪费, 不需要预先分配. 
    容易执行插入和删除操作.
    
缺点:
    相比array,需要更多的搜索时间去访问特定节点, 遍历特别复杂.


array list:
已分配内存满后,新增数值在同一array访问, 需要遍历一遍并copy到新的memory block.

100, 110, O(1)- if new index within range.
                yes = ok
                no = array.next













